<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
	
	
	<!-- 加载src下的c3p0.properties属性配置文件 -->
	<context:property-placeholder location="classpath:c3p0.properties"/>
	
	<!-- 配置C3P0数据库连接池 
		c3p0.initialPoolSize=3
		#连接池保持的最小连接数
		c3p0.minPoolSize=3
		#连接池在无空闲连接可用时一次性创建的新数据库连接数,default:3
		c3p0.acquireIncrement=3
		#连接池中拥有的最大连接数，如果获得新连接时会使连接总数超过这个值则不会再获取新连接，
		#而是等待其他连接释放，所以这个值有可能会设计地很大,default : 15
		c3p0.maxPoolSize=15
		#连接的最大空闲时间，如果超过这个时间，某个数据库连接还没有被使用，则会断开掉这个连接,单位秒
		c3p0.maxIdleTime=100
		#连接池在获得新连接失败时重试的次数，如果小于等于0则无限重试直至连接获得成功
		c3p0.acquireRetryAttempts=30
		#连接池在获得新连接时的间隔时间
		c3p0.acquireRetryDelay=1000
	-->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${c3p0.driverClass}"></property>
		<property name="jdbcUrl" value="${c3p0.jdbcUrl}"></property>
		<property name="user" value="${c3p0.user}"></property>
		<property name="password" value="${c3p0.password}"></property>
		
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}"></property>
		<property name="minPoolSize" value="${c3p0.minPoolSize}"></property>
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}"></property>
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}"></property>
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}"></property>
		<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"></property>
		<property name="acquireRetryDelay" value="${c3p0.acquireRetryDelay}"></property>
	</bean>
	
	<!--配置Hibernate_SessionFactory-->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean" scope="singleton">
	
		<property name="dataSource" ref="dataSource"></property>
		
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">none</prop> -->
			</props>
		</property>
		
		<!-- 自动引入指定路径下的所有的orm映射文件 -->
		<property name="mappingDirectoryLocations" value="classpath:com/mall/entity/hbm"></property>
		
	</bean>
	
	<!-- HibernateTemplate 操作数据库模板工具 -->
	<bean id="hbTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" ></property>
	</bean>
	
	<!--配置hibernate声明式事务管理（采用注解的方式）-->
	<bean id="txManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!-- xml配置事务 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" isolation="DEFAULT" timeout="-1" read-only="false"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(* com.mall.service.*.*(..))" id="pt"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pt"/>
	</aop:config>
	
	<!-- 开启事务注解 -->
	<context:component-scan base-package="com.mall.service"></context:component-scan>
	<tx:annotation-driven transaction-manager="txManager"/>
	
<!-- **************************************************************************************** -->
	
	<!-- struts2的action创建交给spring --><!-- Action层 注入 service层对象 -->
    <bean id="memberAction" class="com.mall.controller.MemberAction" scope="prototype">
    	<property name="baseService" ref="baseService"></property>
    	<property name="memberService" ref="memberService"></property>
    </bean>
    
    <bean id="adminAction" class="com.mall.controller.AdminAction" scope="prototype">
    	<property name="adminService" ref="adminService"></property>
    </bean>
    
 <!-- **************************************************************************************** -->  
  
    <!-- service层对象创建 --><!-- service层 注入  dao层对象 -->
    <bean id="baseService" class="com.mall.service.impl.BaseServiceImpl">
    	<property name="baseDao" ref="baseDao"></property>
    </bean>
    <bean id="memberService" class="com.mall.service.impl.MemberServiceImpl">
    	<property name="memberDao" ref="memberDao"></property>
    </bean>
    
	<bean id="adminService" class="com.mall.service.impl.AdminServiceImpl">
		<property name="adminDao" ref="adminDao"></property>
	</bean>
	
<!-- **************************************************************************************** -->	
	<!-- dao层对象创建  --><!-- dao层  注入  HibernateTemplate和其他对象 -->
	
	<bean id="baseDao" class="com.mall.dao.impl.BaseDaoImpl">
		<property name="hbTemplate" ref="hbTemplate"></property>
	</bean>
	<bean id="memberDao" class="com.mall.dao.impl.MemberDaoImpl">
		<property name="hbTemplate" ref="hbTemplate"></property>
	</bean>
	
	<bean id="adminDao" class="com.mall.dao.impl.AdminDaoImpl">
		<property name="hbTemplate" ref="hbTemplate"></property>
	</bean>
	
<!-- **************************************************************************************** -->	
	<!-- 其他对象创建 -->
	
	
</beans>